---
- hosts: localhost
  vars:
    # ansible_python_interpreter: /usr/bin/python3
    project_directory: "{{ playbook_dir }}"
    project_directories:
      - ansible
      - infra
      # - "{{virtualenv_path}}"
    # project_packages:
      # - python3-apt
      # - python3-docker
    update_python_packages: yes
    python_packages:
      # - ansible~=2.0
      - pip
      - hvac
    #   - ansible-modules-hashivault==4.5.4
      - jmespath
      # - docker # https://stackoverflow.com/questions/50151210/ansible-unable-to-run-docker-compose-in-an-ansible-playbook
      - docker-compose
      - requests
    virtualenv_path: "{{project_directory}}/venv"
    host_architecture: darwin_amd64
    vault_binary_dest: "{{playbook_dir}}/vault"
    consul_template_binary_dest: "{{playbook_dir}}/consul-template"

    git_commit: no
    git_commit_path: '.'
    git_message: 'pushed by ansible'

  tasks:
  - name: create ansible project directory
    file:
      path: "{{project_directory}}"
      state: directory

  - name: create project directory
    file:
      path: "{{item}}"
      state: directory
    with_items: "{{project_directories}}"

  - name: install necessary packages
    apt:
      name: "{{project_packages}}"
      update_cache: yes
    become: yes
    when:
      - project_packages is defined

  - name: check for a requirements file
    stat:
      path: "{{ project_directory }}/requirements.txt"
    register: project_requirements

  - name: install python packages
    pip:
      name: "{{python_packages}}"
      virtualenv: "{{ virtualenv_path }}"
    when:
      - python_packages is defined
      - not project_requirements.stat.exists or update_python_packages

  - name: install python packages from requirements
    pip:
      requirements: "{{ project_directory }}/requirements.txt"
      virtualenv: "{{ virtualenv_path }}"
    when:
      - project_requirements.stat.exists

  - name: add venv to gitignore
    lineinfile:
      path: .gitignore
      line: "{{item}}"
      create: yes
    with_items:
      - /venv/*

  - name: set python interpreter
    set_fact:
      ansible_python_interpreter: "{{ virtualenv_path }}/bin/python"
    when:
      - project_requirements.stat.exists or python_packages is defined

  - name: create requirements file
    shell:
      cmd: "{{ virtualenv_path }}/bin/python -m pip freeze > requirements.txt"
      chdir: "{{ project_directory }}"
    vars:
      ansible_python_interpreter: "{{ virtualenv_path }}/bin/python"
    when: (not project_requirements.stat.exists and python_packages is defined) or update_python_packages

  - name: create startup script
    copy:
      content: |
        source {{ virtualenv_path }}/bin/activate
        cd ansible
      dest: "{{ project_directory }}/start.sh"
      mode: "0755"
    when:
      - project_requirements.stat.exists or python_packages is defined

  - name: add start script to gitignore
    lineinfile:
      path: .gitignore
      line: "{{item}}"
      create: yes
    with_items:
      - "/{{ project_directory }}/start.sh"

  - name: check for git directory
    stat:
      path: "{{ project_directory }}/.git"
    register: git_project
    when: git_commit

  - name: git init
    command:
      cmd: "git init"
      chdir: "{{ project_directory }}"
    when: not git_project.stat.exists
    when: git_commit

  - name: git status
    command:
      cmd: "git status"
      chdir: "{{ project_directory }}"
    register: commit_status_output
    changed_when: false
    when: git_commit

  - name: show git status message
    debug:
      msg: "{{ commit_status_output.stdout.split('\n') }}"
      verbosity: 1
    when: git_commit

  - name: git commit
    shell:
      cmd: "git add {{git_commit_path}} && git commit -m '{{ git_message }}'"
      chdir: "{{ project_directory }}"
    register: commit_message_output
    failed_when:
      - commit_message_output.rc == 1
      - "'nothing to commit, working tree clean' not in commit_message_output.stdout"
    changed_when:
      - "'nothing to commit, working tree clean' not in commit_message_output.stdout"
    when: git_commit

  - name: show git commit message
    debug:
      msg: "{{ commit_message_output.stdout.split('\n') }}"
    when: git_commit

  - name: set python interpreter back to system
    set_fact:
      ansible_python_interpreter: "/usr/bin/python3"

  - name: add binaries to gitignore
    lineinfile:
      path: .gitignore
      line: "{{item}}"
      create: yes
    with_items:
      - /vault
      - /consul-template

  roles:
    - name: vault_binary
      vars:
        vault_platform: "{{host_architecture}}"

    - name: consul_template_binary
      vars:
        consul_template_platform: "{{host_architecture}}"
